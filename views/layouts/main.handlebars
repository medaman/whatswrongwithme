<!doctype html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<link rel="icon" type="image/png" href="assets/img/favicon.ico">
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

	<title>What Is Wrong with Me</title>

	<meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0' name='viewport' />
    <meta name="viewport" content="width=device-width" />

    <!-- Google Sign In -->
    <meta name="google-signin-scope" content="profile email">
    <meta name="google-signin-client_id" content="638533152381-8qvq5kf5f7u2ra7aqbe0p5hkjcmj8gfu.apps.googleusercontent.com">
    <script src="https://apis.google.com/js/platform.js" async defer></script>

    <!-- Bootstrap core CSS     -->
    <link href="assets/css/bootstrap.min.css" rel="stylesheet" />

    <!-- Animation library for notifications   -->
    <link href="assets/css/animate.min.css" rel="stylesheet"/>

    <!--  Light Bootstrap Table core CSS    -->
    <link href="assets/css/style.css" rel="stylesheet"/>

    <!--  Light Bootstrap Table core CSS    -->
    <link href="assets/css/light-bootstrap-dashboard.css" rel="stylesheet"/>

  <!--     Fonts and icons     -->
    <link href="http://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet">
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,700,300' rel='stylesheet' type='text/css'>
    <link href="assets/css/pe-icon-7-stroke.css" rel="stylesheet" />

<style type="text/css">
body {
    background: #F7F7F8;
}
</style>
	<body>
		{{{ body }}}
	</body>


    <!--   Core JS Files   -->
    <script src="assets/js/jquery-1.10.2.js" type="text/javascript"></script>
	<script src="assets/js/bootstrap.min.js" type="text/javascript"></script>

	<!--  Checkbox, Radio & Switch Plugins -->
	<script src="assets/js/bootstrap-checkbox-radio-switch.js"></script>

	<!--  Charts Plugin -->
	<script src="assets/js/chartist.min.js"></script>

    <!--  Notifications Plugin    -->
    <script src="assets/js/bootstrap-notify.js"></script>

    <!--  Google Maps Plugin    -->
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?sensor=false"></script>

    <!-- Light Bootstrap Table Core javascript and methods for Demo purpose -->
	<script src="assets/js/light-bootstrap-dashboard.js"></script>

	<!-- Light Bootstrap Table DEMO methods, don't include it in your project! -->
	<script src="assets/js/demo.js"></script>

    <script src="assets/js/googleauth.js"></script>

	<script type="text/javascript">
    	$(document).ready(function(){

        	demo.initChartist();

    	});
	</script>

    <!-- the follow javascript files are required -->
    <script src="https://cdn.webrtc-experiment.com/RecordRTC.js"></script>
    
        <!-- for Edge/FF/Chrome/Opera/etc. getUserMedia support -->
        <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
        <script src="https://cdn.webrtc-experiment.com/DetectRTC.js"> </script>
    
        <script src="http://cdnjs.cloudflare.com/ajax/libs/wavesurfer.js/1.4.0/wavesurfer.min.js"></script>
    
        <script src="https://cdnjs.cloudflare.com/ajax/libs/wavesurfer.js/1.4.0/plugin/wavesurfer.spectrogram.min.js"></script>

    <!--  Charts Plugin -->
	<script src="assets/js/wave.js"></script>
    
    <!--  Notifications Plugin    -->
    <script src="assets/js/recorder.js"></script>

    <script src="assets/js/dashboard-patient.js"></script>

    <script>
/*
        //create wavesurfer to display a wave file onto the front end html
        //this simple front end assume server returns an array with file name inside
        //frontend makes a ajax request to server and display the wave form of the last file in returned data

        var wavesurfer;

        //when page load, display the latest wav file.
        $.ajax({

            method:"GET",
            url:"/data.json"

        }).done(function(data){

            //console.log(data);

            //var lastIndex = data.length - 1;
            var firstIndex = 0;

            wavesurfer = WaveSurfer.create({

                container: "#waveform",
                waveColor: 'violet',
                progressColor: 'purple'

            })

            wavesurfer.load("username/wav/" + data[firstIndex].filename);

            /*
            wavesurfer.on('ready', function () {
                var spectrogram = Object.create(WaveSurfer.Spectrogram);
                spectrogram.init({
                    wavesurfer: wavesurfer,
                    container: "#wave-spectrogram",
                    fftSamples: 1024,
                    labels: false
                });
            });
            

        })

        //attach event listener to all the playbutton, when clicked, go to server and get the wave file, load onto frontend page and start playing
        $(document).on("click", '.playbutton' ,function (e){

            var fileToPlay = $(this).attr("data_value");
            //console.log(fileToPlay);

            $.ajax({

                method:"GET",
                url:"/data.json"

            }).done(function(data){

                //console.log(data);

                for (var i = 0; i < data.length; i++) {

                    var fileInJson = data[i].filename;

                    //console.log(fileInJson);
                    
                    if (fileToPlay === fileInJson) {

                        wavesurfer.destroy();

                        wavesurfer = WaveSurfer.create({

                            container: "#waveform",
                            waveColor: 'violet',
                            progressColor: 'purple'

                        });

                        var fileLocation = data[i].location;
                        var fileName = data[i].filename;

                        //console.log(fileLocation, fileName);

                        wavesurfer.load("username/wav" + "/" + fileName);

                        wavesurfer.on('ready', function () {

                            wavesurfer.play();

                            /*
                            var spectrogram = Object.create(WaveSurfer.Spectrogram);
                            spectrogram.init({
                                wavesurfer: wavesurfer,
                                container: "#wave-spectrogram",
                                fftSamples: 512,
                                labels: false
                            });
                            

                        });

                    }

                }

            })

        })
*/
    </script>

    <script>
/*
    //records audio from the microphone, user needs to accept the use of microphone.
    //there is NO check for if user denied microphone permission as of now

    var recorder;
    var audioStream;


    //when clicked on start, start recording
    $("#start").on("click", function(e){

        console.log("clicked start");

        navigator.mediaDevices.getUserMedia({audio: true, video:false,}).then(function(stream) {

            audioStream = stream;

            var recordDuration = 5000;

            recorder = new StereoAudioRecorder(stream, {
                sampleRate: 44100,
                bufferSize: 4096,
                numberOfAudioChannels: 1
            });

            recorder.record();
            console.log("start recording");

            setTimeout(function(){

                recorder.stop(function(blob){

                    var now = Date.now();
                    var fileName = now + ".wav";

                    if(!recorder) return alert('No recording found.');
                
                    $.ajax({

                        type: 'POST',
                        url: '/media',
                        data: blob,
                        processData: false,
                        contentType: false

                    }).done(function(data){

                        console.log("successfully saved wav file");
                        audioStream.stop();
                        location.reload();

                    })

                })

            }, recordDuration);

        }).catch(function(error) {
            
            if(error && error.name === 'ConstraintNotSatisfiedError') {
                console.log("something bad happened");
            }

            errorCallback(error);
            });



    })

    //when user clicked on stop, stop recording and post data via ajax to server
    $("#stop").on("click", function(e){

        //console.log("clicked stop");
        recorder.stop(function(blob){

            var now = Date.now();
            var fileName = now + ".wav";

            if(!recorder) return alert('No recording found.');
            
            $.ajax({

                type: 'POST',
                url: '/media',
                data: blob,
                processData: false,
                contentType: false

            }).done(function(data){

                console.log("successfully saved wav file");
                audioStream.stop();
                location.reload();

            })


        })

    })

*/
</script>

</html>